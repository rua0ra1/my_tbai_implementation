#include "tbai_core/control/StateSubscriber.hpp"

namespace tbai {
namespace core {

/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
StateSubscriber::StateSubscriber(ros::NodeHandle &nh, const std::string &stateTopic) {
    stateSubscriber_ = nh.subscribe(stateTopic, 1, &StateSubscriber::stateMessageCallback, this);
}

/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
void StateSubscriber::waitTillInitialized() {
    while (!stateMessage_ && ros::ok()) {
        ros::spinOnce();
        ros::Duration(0.05).sleep();
        ROS_INFO_STREAM_THROTTLE(1, "[StateSubscriber] Waiting for state message...");
    }
}

/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
void StateSubscriber::updateLatestRbdState() {
    latestRbdState_ = vector_t(Eigen::Map<vector_t>(stateMessage_->rbd_state.data(), stateMessage_->rbd_state.size()));
}

/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
const vector_t &StateSubscriber::getLatestRbdState() {
    if (!stateReady_) {
        updateLatestRbdState();
        stateReady_ = true;
    }
    return latestRbdState_;
}

/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
void StateSubscriber::stateMessageCallback(const my_tbai_msgs::RbdState::Ptr &msg) {
    stateMessage_ = msg;
    stateReady_ = false;
}

}  // namespace core
}  // namespace tbai
